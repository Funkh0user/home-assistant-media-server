[{"/home/mark/media-server/front-end/src/index.js":"1","/home/mark/media-server/front-end/src/App.js":"2","/home/mark/media-server/front-end/src/reportWebVitals.js":"3"},{"size":535,"mtime":1660005876550,"results":"4","hashOfConfig":"5"},{"size":3294,"mtime":1660295615737,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1660005876550,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16jfy6y",{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/mark/media-server/front-end/src/index.js",[],"/home/mark/media-server/front-end/src/App.js",["15","16","17"],"import React, { useEffect, useState, useRef } from 'react';\n\nfunction App() {\n  const localMediaRef = useRef();\n  const peerConnection = useRef();\n  const username = `mark${Math.random() * 10}`;\n\n  // open websocket to signaling server.\n  const ws = new WebSocket(`wss://192.168.0.24:8080`);\n\n  // const createPeerConnection = () => {\n  peerConnection.current = new RTCPeerConnection();\n\n  peerConnection.current.onicecandidate = (candidate) => {\n    console.log('candidate', candidate);\n  };\n\n  peerConnection.current.onnegotiationneeded = (args) => {\n    console.log('negotiation needed', args);\n  };\n  peerConnection.ontrack = (track) => {\n    console.log(track);\n  };\n  // };\n\n  useEffect(() => {\n    const getLocalMedia = async () => {\n      let mediaStream;\n      const constraints = {\n        video: true,\n        audio: false,\n      };\n      try {\n        mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\n      } catch (error) {\n        console.log('error getting local media devices: ', error);\n      }\n      document.getElementById('localVideo').srcObject = mediaStream;\n      mediaStream\n        .getTracks()\n        .forEach(async (track) =>\n          peerConnection.current.addTrack(track, mediaStream)\n        );\n    };\n    getLocalMedia();\n  }, []);\n\n  useEffect(() => {\n    ws.addEventListener('open', () => {\n      console.log('connection is open');\n\n      createSdpOffer();\n\n      ws.addEventListener('message', (message) => {\n        console.log('received message.', message);\n        console.log(\n          'received message from server.',\n          message,\n          JSON.parse(message.data)\n        );\n        switch (JSON.parse(message.data).type) {\n          case 'sdpOffer':\n            console.log(JSON.parse(message.data).sender);\n            console.log(username, JSON.parse(message.data).sender);\n            if (JSON.parse(message.data).sender !== username)\n              createSdpAnswer(JSON.parse(message.data).data);\n            break;\n          default:\n            console.log('default case reached.');\n        }\n      });\n      ws.addEventListener('error', (args) => {\n        console.log('Error: ', args);\n      });\n    });\n\n    const createSdpOffer = async () => {\n      peerConnection.current.createOffer().then(async (offer) => {\n        console.log('peerOffer', offer);\n        await peerConnection.current.setLocalDescription();\n\n        console.log(\n          'Peer localDescription',\n          peerConnection.current.localDescription\n        );\n        try {\n          ws.send(\n            JSON.stringify({\n              message: 'sdpOffer',\n              sender: username,\n              data: peerConnection.current.localDescription,\n            })\n          );\n        } catch (error) {\n          console.log('trycatch error', error);\n        }\n      });\n    };\n\n    const createSdpAnswer = (data) => {\n      console.log('createSdpAnswer', data);\n    };\n  }, []);\n\n  return (\n    <div>\n      <p>test</p>\n      <video\n        muted\n        autoplay=\"autoplay\"\n        id=\"localVideo\"\n        style={{ border: '1px solid black' }}\n      ></video>\n      <video\n        muted\n        autoplay=\"autoplay\"\n        id=\"remoteVideo\"\n        style={{ border: '1px solid black' }}\n      ></video>\n    </div>\n  );\n}\n\nexport default App;\n","/home/mark/media-server/front-end/src/reportWebVitals.js",[],{"ruleId":"18","severity":1,"message":"19","line":1,"column":28,"nodeType":"20","messageId":"21","endLine":1,"endColumn":36},{"ruleId":"18","severity":1,"message":"22","line":4,"column":9,"nodeType":"20","messageId":"21","endLine":4,"endColumn":22},{"ruleId":"23","severity":1,"message":"24","line":103,"column":6,"nodeType":"25","endLine":103,"endColumn":8,"suggestions":"26"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'localMediaRef' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'username' and 'ws'. Either include them or remove the dependency array.","ArrayExpression",["27"],{"desc":"28","fix":"29"},"Update the dependencies array to be: [username, ws]",{"range":"30","text":"31"},[2927,2929],"[username, ws]"]