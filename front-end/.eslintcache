[{"/home/mark/media-server/front-end/src/index.js":"1","/home/mark/media-server/front-end/src/App.js":"2","/home/mark/media-server/front-end/src/reportWebVitals.js":"3"},{"size":535,"mtime":1660005876550,"results":"4","hashOfConfig":"5"},{"size":5154,"mtime":1660520535482,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1660005876550,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"16jfy6y",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"/home/mark/media-server/front-end/src/index.js",[],["16","17"],"/home/mark/media-server/front-end/src/App.js",["18","19","20"],"import React, { useEffect, useRef, useState } from 'react';\n\nfunction App() {\n  const peerConnection = useRef();\n  const localVideo = useRef();\n  const remoteVideo = useRef();\n  const [username, setUsername] = useState(\n    `mark${Math.floor(Math.random() * 10)}`\n  );\n\n  // open websocket to signaling server.\n  const ws = new WebSocket(`wss://192.168.0.24:8080`);\n\n  useEffect(() => {\n    const createPeerConnection = async () => {\n      peerConnection.current = new RTCPeerConnection({\n        configuration: {\n          offerToReceiveAudio: false,\n          offerToReceiveVideo: true,\n        },\n        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],\n      });\n\n      peerConnection.current.onicecandidate = (event) => {\n        console.log('Sending Ice candidate to server', event.candidate);\n        ws.send(\n          JSON.stringify({\n            message: 'iceCandidate',\n            data: event.candidate,\n            sender: username,\n          })\n        );\n      };\n\n      peerConnection.current.onnegotiationneeded = async (event) => {\n        console.log('Negotiation needed', event);\n        await peerConnection.current.createOffer({\n          offerToReceiveAudio: false,\n          offerToReceiveVideo: true,\n        });\n        await peerConnection.current.setLocalDescription();\n        console.log(\n          `${username}'s localDescription`,\n          peerConnection.current.localDescription\n        );\n\n        try {\n          ws.send(\n            JSON.stringify({\n              message: 'sdpOffer',\n              sender: username,\n              data: peerConnection.current.localDescription,\n            })\n          );\n        } catch (error) {\n          console.log('trycatch error', error);\n        }\n      };\n\n      peerConnection.current.ontrack = ({ track, streams }) => {\n        console.log('New remote mediastream', track, streams);\n        remoteVideo.current = document.getElementById('remoteVideo');\n        remoteVideo.current.src = streams[0];\n        remoteVideo.current.srcObject = streams[0];\n        console.log(remoteVideo.current);\n      };\n\n      peerConnection.current.onIceConnectionStateChange = (newState) => {\n        console.log('ice connection state changed: ', newState);\n      };\n\n      peerConnection.current.onsignalingStateChange = (newState) => {\n        console.log('Signaling state changed: ', newState);\n      };\n\n      // const offer = await peerConnection.current.createOffer({\n      //   offerToReceiveAudio: false,\n      //   offerToReceiveVideo: true,\n      // });\n      // await peerConnection.current.setLocalDescription(offer);\n\n      // ws.send(\n      //   JSON.stringify({\n      //     message: 'sdpOffer',\n      //     data: peerConnection.localDescription,\n      //     sender: username,\n      //   })\n      // );\n    };\n\n    const getLocalMedia = async () => {\n      let stream;\n      const constraints = {\n        video: true,\n        audio: false,\n      };\n      localVideo.current = document.getElementById('localVideo');\n      stream = await navigator.mediaDevices.getUserMedia(constraints);\n      console.log('local mediastream object', stream);\n      localVideo.current.srcObject = stream;\n      stream\n        .getTracks()\n        .forEach(\n          async (track) => await peerConnection.current.addTrack(track, stream)\n        );\n    };\n    getLocalMedia();\n    createPeerConnection();\n  }, []);\n\n  useEffect(() => {\n    ws.addEventListener('open', () => {\n      console.log('connection is open');\n\n      ws.addEventListener('message', async (message) => {\n        const sender = JSON.parse(message.data).sender;\n        const data = JSON.parse(message.data);\n\n        switch (data.type) {\n          case 'sdpOffer':\n            console.log('my name', username);\n            console.log('senders name', sender);\n            console.log(data);\n            if (!data.data) return;\n            await peerConnection.current.setRemoteDescription({\n              type: data.data.type,\n              sdp: data.data.sdp,\n            });\n            await peerConnection.current.setLocalDescription();\n            ws.send(\n              JSON.stringify({\n                message: 'sdpOffer',\n                data: peerConnection.localDescription,\n                sender: username,\n              })\n            );\n            break;\n\n          case 'iceCandidate':\n            console.log('adding ice candidate from: ', sender, data.data);\n            if (!data.data)\n              await peerConnection.current.addIceCandidate(data.data);\n            break;\n\n          default:\n            console.log('default case reached.');\n        }\n      });\n      ws.addEventListener('error', (error) => {\n        console.log('Error: ', error);\n      });\n    });\n  }, []);\n\n  return (\n    <div>\n      <p>test</p>\n      <video\n        muted\n        autoplay=\"autoplay\"\n        id=\"localVideo\"\n        style={{ border: '1px solid black' }}\n        ref={localVideo}\n      ></video>\n      <video\n        muted\n        autoplay=\"autoplay\"\n        id=\"remoteVideo\"\n        style={{ border: '1px solid black' }}\n        ref={remoteVideo}\n      ></video>\n    </div>\n  );\n}\n\nexport default App;\n","/home/mark/media-server/front-end/src/reportWebVitals.js",[],{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":7,"column":20,"nodeType":"27","messageId":"28","endLine":7,"endColumn":31},{"ruleId":"29","severity":1,"message":"30","line":109,"column":6,"nodeType":"31","endLine":109,"endColumn":8,"suggestions":"32"},{"ruleId":"29","severity":1,"message":"30","line":153,"column":6,"nodeType":"31","endLine":153,"endColumn":8,"suggestions":"33"},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-unused-vars","'setUsername' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'username' and 'ws'. Either include them or remove the dependency array.","ArrayExpression",["36"],["37"],"no-global-assign","no-unsafe-negation",{"desc":"38","fix":"39"},{"desc":"38","fix":"40"},"Update the dependencies array to be: [username, ws]",{"range":"41","text":"42"},{"range":"43","text":"42"},[3380,3382],"[username, ws]",[4736,4738]]